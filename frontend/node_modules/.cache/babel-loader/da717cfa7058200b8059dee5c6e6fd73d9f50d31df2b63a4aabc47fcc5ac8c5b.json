{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n/**\n * Slice for managing chat-related state.\n * @type {import(\"@reduxjs/toolkit\").Slice}\n */\nexport const chatSlice = createSlice({\n  name: \"chat\",\n  initialState: {\n    messages: [],\n    history: [{\n      id: 0,\n      description: \"Welcome to the chat! How can I assist you today?\"\n    }, {\n      id: 1,\n      description: \"Please feel free to ask any questions you may have.\"\n    }, {\n      id: 2,\n      description: \"I'm here to help you with any inquiries about rental properties.\"\n    }],\n    loading: false,\n    error: null\n  },\n  reducers: {\n    /**\n     * Action creator for fetching a new message.\n     * @param {Object} state - Current state.\n     * @param {import(\"@reduxjs/toolkit\").PayloadAction<string>} action - Payload action containing the message text.\n     * @returns {void}\n     */\n    fetchMessage: (state, action) => {\n      return {\n        ...state,\n        error: null,\n        messages: [...state.messages, {\n          id: state.messages.length,\n          text: action.payload,\n          type: \"q\",\n          // q: question, a: answer\n          channelId: 0\n        }],\n        loading: true\n      };\n    },\n    /**\n     * Action creator for successful message fetch.\n     * @param {Object} state - Current state.\n     * @param {import(\"@reduxjs/toolkit\").PayloadAction<string>} action - Payload action containing the message text.\n     * @returns {void}\n     */\n    fetchMessageSuccess: (state, action) => {\n      return {\n        ...state,\n        error: null,\n        messages: [...state.messages, {\n          id: state.messages.length,\n          text: action.payload,\n          type: \"a\",\n          // q: question, a: answer\n          channelId: 0\n        }],\n        loading: false\n      };\n    },\n    /**\n     * Action creator for failed message fetch.\n     * @param {Object} state - Current state.\n     * @param {import(\"@reduxjs/toolkit\").PayloadAction<string>} action - Payload action containing the error message.\n     * @returns {void}\n     */\n    fetchMessageFailed: (state, action) => {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    }\n  }\n});\nexport const {\n  fetchMessage,\n  fetchMessageSuccess,\n  fetchMessageFailed\n} = chatSlice.actions;","map":{"version":3,"names":["createSlice","chatSlice","name","initialState","messages","history","id","description","loading","error","reducers","fetchMessage","state","action","length","text","payload","type","channelId","fetchMessageSuccess","fetchMessageFailed","actions"],"sources":["C:/Users/Ajay Kumar/Downloads/chatgpt-example-main/openAI-api-Intergration/frontend/src/store/chat.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n/**\n * Slice for managing chat-related state.\n * @type {import(\"@reduxjs/toolkit\").Slice}\n */\nexport const chatSlice = createSlice({\n  name: \"chat\",\n  initialState: {\n    messages: [],\n    history: [\n  {\n    id: 0,\n    description: \"Welcome to the chat! How can I assist you today?\",\n  },\n  {\n    id: 1,\n    description: \"Please feel free to ask any questions you may have.\",\n  },\n  {\n    id: 2,\n    description: \"I'm here to help you with any inquiries about rental properties.\",\n  },\n],\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    /**\n     * Action creator for fetching a new message.\n     * @param {Object} state - Current state.\n     * @param {import(\"@reduxjs/toolkit\").PayloadAction<string>} action - Payload action containing the message text.\n     * @returns {void}\n     */\n    fetchMessage: (state, action) => {\n      return {\n        ...state,\n        error: null,\n        messages: [\n          ...state.messages,\n          {\n            id: state.messages.length,\n            text: action.payload,\n            type: \"q\", // q: question, a: answer\n            channelId: 0,\n          },\n        ],\n        loading: true,\n      };\n    },\n    /**\n     * Action creator for successful message fetch.\n     * @param {Object} state - Current state.\n     * @param {import(\"@reduxjs/toolkit\").PayloadAction<string>} action - Payload action containing the message text.\n     * @returns {void}\n     */\n    fetchMessageSuccess: (state, action) => {\n      return {\n        ...state,\n        error: null,\n        messages: [\n          ...state.messages,\n          {\n            id: state.messages.length,\n            text: action.payload,\n            type: \"a\", // q: question, a: answer\n            channelId: 0,\n          },\n        ],\n        loading: false,\n      };\n    },\n    /**\n     * Action creator for failed message fetch.\n     * @param {Object} state - Current state.\n     * @param {import(\"@reduxjs/toolkit\").PayloadAction<string>} action - Payload action containing the error message.\n     * @returns {void}\n     */\n    fetchMessageFailed: (state, action) => {\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    },\n  },\n});\n\nexport const { fetchMessage, fetchMessageSuccess, fetchMessageFailed } = chatSlice.actions;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;EACnCE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE,CACX;MACEC,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE;IACf,CAAC,EACD;MACED,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE;IACf,CAAC,EACD;MACED,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE;IACf,CAAC,CACF;IACGC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;AACJ;AACA;AACA;AACA;AACA;IACIC,YAAY,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/B,OAAO;QACL,GAAGD,KAAK;QACRH,KAAK,EAAE,IAAI;QACXL,QAAQ,EAAE,CACR,GAAGQ,KAAK,CAACR,QAAQ,EACjB;UACEE,EAAE,EAAEM,KAAK,CAACR,QAAQ,CAACU,MAAM;UACzBC,IAAI,EAAEF,MAAM,CAACG,OAAO;UACpBC,IAAI,EAAE,GAAG;UAAE;UACXC,SAAS,EAAE;QACb,CAAC,CACF;QACDV,OAAO,EAAE;MACX,CAAC;IACH,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;IACIW,mBAAmB,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACtC,OAAO;QACL,GAAGD,KAAK;QACRH,KAAK,EAAE,IAAI;QACXL,QAAQ,EAAE,CACR,GAAGQ,KAAK,CAACR,QAAQ,EACjB;UACEE,EAAE,EAAEM,KAAK,CAACR,QAAQ,CAACU,MAAM;UACzBC,IAAI,EAAEF,MAAM,CAACG,OAAO;UACpBC,IAAI,EAAE,GAAG;UAAE;UACXC,SAAS,EAAE;QACb,CAAC,CACF;QACDV,OAAO,EAAE;MACX,CAAC;IACH,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;IACIY,kBAAkB,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACrC,OAAO;QACL,GAAGD,KAAK;QACRH,KAAK,EAAEI,MAAM,CAACG,OAAO;QACrBR,OAAO,EAAE;MACX,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,YAAY;EAAEQ,mBAAmB;EAAEC;AAAmB,CAAC,GAAGnB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}