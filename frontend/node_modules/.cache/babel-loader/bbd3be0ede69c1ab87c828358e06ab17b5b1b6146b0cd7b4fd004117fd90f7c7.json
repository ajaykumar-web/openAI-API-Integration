{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { callAPI } from \".\";\nimport { actions } from \"../actions\";\nimport { fetchMessage, fetchMessageFailed, fetchMessageSuccess } from \"../store/chat\";\nimport { API_HOST } from \"../utils/constants\";\n\n/**\n * Saga function to handle fetching messages.\n * @param {Object} action - The action containing the payload.\n * @returns {void}\n */\nexport function* fetchMessageSaga(action) {\n  try {\n    var _result$data;\n    yield put(fetchMessage(action.payload));\n    let result = yield call(() => callAPI({\n      url: `${API_HOST}/chat`,\n      method: \"POST\",\n      data: {\n        message: action.payload\n      }\n    }));\n    yield put(fetchMessageSuccess((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.message));\n  } catch (err) {\n    var _err$response$data$er, _err$response, _err$response$data, _err$response$data$er2;\n    yield put(fetchMessageFailed((_err$response$data$er = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er2 = _err$response$data.error) === null || _err$response$data$er2 === void 0 ? void 0 : _err$response$data$er2.message) !== null && _err$response$data$er !== void 0 ? _err$response$data$er : \"Failed to fetch message.\"));\n  }\n}\n\n/**\n * Saga watcher function for fetching messages.\n * Watches for the latest FETCH_MESSAGE action.\n * @returns {void}\n */\nexport function* fetchMessageWatcher() {\n  yield takeLatest(actions.chat.FETCH_MESSAGE, fetchMessageSaga);\n}","map":{"version":3,"names":["call","put","takeLatest","callAPI","actions","fetchMessage","fetchMessageFailed","fetchMessageSuccess","API_HOST","fetchMessageSaga","action","payload","result","url","method","data","message","err","response","error","fetchMessageWatcher","chat","FETCH_MESSAGE"],"sources":["C:/Users/Ajay Kumar/Downloads/chatgpt-example-main/openAI-api-Intergration/frontend/src/saga/chat.js"],"sourcesContent":["import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { callAPI } from \".\";\nimport { actions } from \"../actions\";\nimport { fetchMessage, fetchMessageFailed, fetchMessageSuccess } from \"../store/chat\";\nimport { API_HOST } from \"../utils/constants\";\n\n/**\n * Saga function to handle fetching messages.\n * @param {Object} action - The action containing the payload.\n * @returns {void}\n */\nexport function* fetchMessageSaga(action) {\n  try {\n    yield put(fetchMessage(action.payload));\n    let result = yield call(() =>\n      callAPI({ url: `${API_HOST}/chat`, method: \"POST\", data: { message: action.payload } })\n    );\n    yield put(fetchMessageSuccess(result.data?.message));\n  } catch (err) {\n    yield put(fetchMessageFailed(err.response?.data?.error?.message ?? \"Failed to fetch message.\"));\n  }\n}\n\n/**\n * Saga watcher function for fetching messages.\n * Watches for the latest FETCH_MESSAGE action.\n * @returns {void}\n */\nexport function* fetchMessageWatcher() {\n  yield takeLatest(actions.chat.FETCH_MESSAGE, fetchMessageSaga);\n}\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,SAASC,OAAO,QAAQ,GAAG;AAC3B,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,YAAY,EAAEC,kBAAkB,EAAEC,mBAAmB,QAAQ,eAAe;AACrF,SAASC,QAAQ,QAAQ,oBAAoB;;AAE7C;AACA;AACA;AACA;AACA;AACA,OAAO,UAAUC,gBAAgB,CAACC,MAAM,EAAE;EACxC,IAAI;IAAA;IACF,MAAMT,GAAG,CAACI,YAAY,CAACK,MAAM,CAACC,OAAO,CAAC,CAAC;IACvC,IAAIC,MAAM,GAAG,MAAMZ,IAAI,CAAC,MACtBG,OAAO,CAAC;MAAEU,GAAG,EAAG,GAAEL,QAAS,OAAM;MAAEM,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAE;QAAEC,OAAO,EAAEN,MAAM,CAACC;MAAQ;IAAE,CAAC,CAAC,CACxF;IACD,MAAMV,GAAG,CAACM,mBAAmB,iBAACK,MAAM,CAACG,IAAI,iDAAX,aAAaC,OAAO,CAAC,CAAC;EACtD,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA;IACZ,MAAMhB,GAAG,CAACK,kBAAkB,2CAACW,GAAG,CAACC,QAAQ,wEAAZ,cAAcH,IAAI,iFAAlB,mBAAoBI,KAAK,2DAAzB,uBAA2BH,OAAO,yEAAI,0BAA0B,CAAC,CAAC;EACjG;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,UAAUI,mBAAmB,GAAG;EACrC,MAAMlB,UAAU,CAACE,OAAO,CAACiB,IAAI,CAACC,aAAa,EAAEb,gBAAgB,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}