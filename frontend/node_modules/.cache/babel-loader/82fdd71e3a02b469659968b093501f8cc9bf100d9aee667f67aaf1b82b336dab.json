{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ajay Kumar\\\\Downloads\\\\chatgpt-example-main\\\\openAI-api-Intergration\\\\frontend\\\\src\\\\components\\\\ChatView\\\\index.js\",\n  _s = $RefreshSig$();\nimport { createRef, useEffect, useRef, useState } from \"react\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { Space, message, Spin } from \"antd\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport moment from \"moment\";\nimport styles from \"./style\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * ChatView component for displaying chat messages.\n * @returns {JSX.Element} The rendered ChatView component.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatView = () => {\n  _s();\n  // State hooks\n  const [copied, setCopied] = useState(false);\n  const [messageApi, contextHolder] = message.useMessage();\n  const messageRefs = useRef([]);\n\n  // Redux state\n  const {\n    messages,\n    loading,\n    error\n  } = useSelector(state => state.chat);\n\n  // Create refs for message elements\n  messageRefs.current = [...Array(messages.length).keys()].map((_, i) => {\n    var _messageRefs$current$;\n    return (_messageRefs$current$ = messageRefs.current[i]) !== null && _messageRefs$current$ !== void 0 ? _messageRefs$current$ : /*#__PURE__*/createRef();\n  });\n\n  // Effect hook for handling copied state\n  useEffect(() => {\n    if (copied) {\n      messageApi.open({\n        type: \"success\",\n        content: \"Copied successfully!\"\n      }).then(() => {\n        setCopied(false);\n      });\n    }\n  }, [copied]);\n\n  // Effect hook for scrolling to the latest message and handling errors\n  useEffect(() => {\n    if (messages.length) {\n      // Scroll to the latest message\n      setTimeout(() => {\n        messageRefs.current[messages.length - 1].current.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }, 1);\n    }\n    // Display error message if any\n    if (error && !loading) {\n      messageApi.open({\n        type: \"error\",\n        content: error\n      });\n    }\n  }, [messages, error, loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.chatViewStyle,\n    children: [contextHolder, /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.topMsgWrapperStyle,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: styles.topMsgStyle,\n        children: \"This chat is end to end encrypted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messageRefs.current[idx],\n      style: msg.type === \"a\" ? null : styles.sentMsgContainerStyle,\n      children: [/*#__PURE__*/_jsxDEV(Space, {\n        style: msg.type === \"a\" ? styles.receivedMsgStyle : styles.sentMsgStyle,\n        align: \"start\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.msgTextStyle,\n          dangerouslySetInnerHTML: {\n            __html: msg.text.replace(/\\n/g, \"<br />\")\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), msg.type === \"a\" ? /*#__PURE__*/_jsxDEV(CopyToClipboard, {\n          onCopy: () => setCopied(true),\n          text: msg.text,\n          children: /*#__PURE__*/_jsxDEV(CopyOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.timeStyle,\n        children: moment(msg.time).format(\"h:mm a\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, msg.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)), loading ? /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatView, \"+cAClZ8/I9TtZiDx8NNrO2tzmas=\", false, function () {\n  return [message.useMessage, useSelector];\n});\n_c = ChatView;\nexport default ChatView;\nvar _c;\n$RefreshReg$(_c, \"ChatView\");","map":{"version":3,"names":["createRef","useEffect","useRef","useState","CopyOutlined","Space","message","Spin","CopyToClipboard","moment","styles","useSelector","ChatView","copied","setCopied","messageApi","contextHolder","useMessage","messageRefs","messages","loading","error","state","chat","current","Array","length","keys","map","_","i","open","type","content","then","setTimeout","scrollIntoView","behavior","chatViewStyle","topMsgWrapperStyle","topMsgStyle","msg","idx","sentMsgContainerStyle","receivedMsgStyle","sentMsgStyle","msgTextStyle","__html","text","replace","timeStyle","time","format","id"],"sources":["C:/Users/Ajay Kumar/Downloads/chatgpt-example-main/openAI-api-Intergration/frontend/src/components/ChatView/index.js"],"sourcesContent":["import { createRef, useEffect, useRef, useState } from \"react\";\nimport { CopyOutlined } from \"@ant-design/icons\";\nimport { Space, message, Spin } from \"antd\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport moment from \"moment\";\nimport styles from \"./style\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * ChatView component for displaying chat messages.\n * @returns {JSX.Element} The rendered ChatView component.\n */\nconst ChatView = () => {\n  // State hooks\n  const [copied, setCopied] = useState(false);\n  const [messageApi, contextHolder] = message.useMessage();\n  const messageRefs = useRef([]);\n\n  // Redux state\n  const { messages, loading, error } = useSelector((state) => state.chat);\n\n  // Create refs for message elements\n  messageRefs.current = [...Array(messages.length).keys()].map(\n    (_, i) => messageRefs.current[i] ?? createRef()\n  );\n\n  // Effect hook for handling copied state\n  useEffect(() => {\n    if (copied) {\n      messageApi\n        .open({\n          type: \"success\",\n          content: \"Copied successfully!\",\n        })\n        .then(() => {\n          setCopied(false);\n        });\n    }\n  }, [copied]);\n\n  // Effect hook for scrolling to the latest message and handling errors\n  useEffect(() => {\n    if (messages.length) {\n      // Scroll to the latest message\n      setTimeout(() => {\n        messageRefs.current[messages.length - 1].current.scrollIntoView({\n          behavior: \"smooth\",\n        });\n      }, 1);\n    }\n    // Display error message if any\n    if (error && !loading) {\n      messageApi.open({\n        type: \"error\",\n        content: error,\n      });\n    }\n  }, [messages, error, loading]);\n\n  return (\n    <div style={styles.chatViewStyle}>\n      {contextHolder}\n      <div style={styles.topMsgWrapperStyle}>\n        <span style={styles.topMsgStyle}>This chat is end to end encrypted</span>\n      </div>\n      {messages.map((msg, idx) => (\n        <div\n          key={msg.id}\n          ref={messageRefs.current[idx]}\n          style={msg.type === \"a\" ? null : styles.sentMsgContainerStyle}\n        >\n          <Space\n            style={msg.type === \"a\" ? styles.receivedMsgStyle : styles.sentMsgStyle}\n            align=\"start\"\n          >\n            <div\n              style={styles.msgTextStyle}\n              dangerouslySetInnerHTML={{ __html: msg.text.replace(/\\n/g, \"<br />\") }}\n            ></div>\n            {msg.type === \"a\" ? (\n              <CopyToClipboard onCopy={() => setCopied(true)} text={msg.text}>\n                <CopyOutlined />\n              </CopyToClipboard>\n            ) : (\n              <></>\n            )}\n          </Space>\n          <div style={styles.timeStyle}>{moment(msg.time).format(\"h:mm a\")}</div>\n        </div>\n      ))}\n      {loading ? <Spin /> : <></>}\n    </div>\n  );\n};\n\nexport default ChatView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}