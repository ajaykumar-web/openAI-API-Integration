{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ajay Kumar\\\\Downloads\\\\chatgpt-example-main\\\\openAI-api-Intergration\\\\frontend\\\\src\\\\components\\\\ChatForm\\\\index.js\",\n  _s = $RefreshSig$();\nimport { AudioOutlined, PaperClipOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input } from \"antd\";\nimport { useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchMessage } from \"../../actions/chatActions\";\nimport styles from \"./style\";\n\n/**\n * Component representing a form for chat input.\n * @component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatForm = () => {\n  _s();\n  // Form instance for managing form state\n  const [chatForm] = Form.useForm();\n\n  // Reference to the message input element\n  const messageInputRef = useRef(null);\n\n  // Redux hook to dispatch actions\n  const dispatch = useDispatch();\n\n  // Redux hook to access chat state\n  const {\n    loading\n  } = useSelector(state => state.chat);\n\n  /**\n   * Function to handle form submission.\n   * @param {Event} event - The submit event.\n   */\n  const onSubmit = event => {\n    if (!event.target.value) {\n      return;\n    }\n    dispatch(fetchMessage(event.target.value));\n    chatForm.resetFields();\n  };\n\n  /**\n   * Effect to focus on the message input when loading state changes.\n   */\n  useEffect(() => {\n    if (!loading) {\n      // To run in the next cycle.\n      setTimeout(() => {\n        messageInputRef.current.focus();\n      }, 0);\n    }\n  }, [loading]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    layout: \"inline\",\n    form: chatForm,\n    name: \"message-form\",\n    style: styles.formStyle,\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      style: styles.inputStyle,\n      name: \"message\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        size: \"large\",\n        suffix: /*#__PURE__*/_jsxDEV(PaperClipOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }, this),\n        placeholder: \"Message\",\n        disabled: loading,\n        onPressEnter: onSubmit,\n        ref: messageInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: styles.btnStyle,\n      name: \"sendMsg\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        size: \"large\",\n        shape: \"circle\",\n        children: /*#__PURE__*/_jsxDEV(AudioOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatForm, \"kva1QIwQkF2KUgvYkyN81XE7ko4=\", false, function () {\n  return [Form.useForm, useDispatch, useSelector];\n});\n_c = ChatForm;\nexport default ChatForm;\nvar _c;\n$RefreshReg$(_c, \"ChatForm\");","map":{"version":3,"names":["AudioOutlined","PaperClipOutlined","Button","Form","Input","useRef","useEffect","useDispatch","useSelector","fetchMessage","styles","ChatForm","chatForm","useForm","messageInputRef","dispatch","loading","state","chat","onSubmit","event","target","value","resetFields","setTimeout","current","focus","formStyle","inputStyle","btnStyle"],"sources":["C:/Users/Ajay Kumar/Downloads/chatgpt-example-main/openAI-api-Intergration/frontend/src/components/ChatForm/index.js"],"sourcesContent":["import { AudioOutlined, PaperClipOutlined } from \"@ant-design/icons\";\nimport { Button, Form, Input } from \"antd\";\nimport { useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchMessage } from \"../../actions/chatActions\";\nimport styles from \"./style\";\n\n/**\n * Component representing a form for chat input.\n * @component\n */\nconst ChatForm = () => {\n  // Form instance for managing form state\n  const [chatForm] = Form.useForm();\n\n  // Reference to the message input element\n  const messageInputRef = useRef(null);\n\n  // Redux hook to dispatch actions\n  const dispatch = useDispatch();\n\n  // Redux hook to access chat state\n  const { loading } = useSelector((state) => state.chat);\n\n  /**\n   * Function to handle form submission.\n   * @param {Event} event - The submit event.\n   */\n  const onSubmit = (event) => {\n    if (!event.target.value) {\n      return;\n    }\n    dispatch(fetchMessage(event.target.value));\n    chatForm.resetFields();\n  };\n\n  /**\n   * Effect to focus on the message input when loading state changes.\n   */\n  useEffect(() => {\n    if (!loading) {\n      // To run in the next cycle.\n      setTimeout(() => {\n        messageInputRef.current.focus();\n      }, 0);\n    }\n  }, [loading]);\n\n  return (\n    <Form layout=\"inline\" form={chatForm} name=\"message-form\" style={styles.formStyle}>\n      <Form.Item style={styles.inputStyle} name=\"message\">\n        <Input\n          size=\"large\"\n          suffix={<PaperClipOutlined />}\n          placeholder=\"Message\"\n          disabled={loading}\n          onPressEnter={onSubmit}\n          ref={messageInputRef}\n        />\n      </Form.Item>\n      <Form.Item style={styles.btnStyle} name=\"sendMsg\">\n        <Button type=\"primary\" size=\"large\" shape=\"circle\">\n          <AudioOutlined />\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default ChatForm;\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,iBAAiB,QAAQ,mBAAmB;AACpE,SAASC,MAAM,EAAEC,IAAI,EAAEC,KAAK,QAAQ,MAAM;AAC1C,SAASC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,OAAOC,MAAM,MAAM,SAAS;;AAE5B;AACA;AACA;AACA;AAHA;AAIA,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB;EACA,MAAM,CAACC,QAAQ,CAAC,GAAGT,IAAI,CAACU,OAAO,EAAE;;EAEjC;EACA,MAAMC,eAAe,GAAGT,MAAM,CAAC,IAAI,CAAC;;EAEpC;EACA,MAAMU,QAAQ,GAAGR,WAAW,EAAE;;EAE9B;EACA,MAAM;IAAES;EAAQ,CAAC,GAAGR,WAAW,CAAES,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;;EAEtD;AACF;AACA;AACA;EACE,MAAMC,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI,CAACA,KAAK,CAACC,MAAM,CAACC,KAAK,EAAE;MACvB;IACF;IACAP,QAAQ,CAACN,YAAY,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC;IAC1CV,QAAQ,CAACW,WAAW,EAAE;EACxB,CAAC;;EAED;AACF;AACA;EACEjB,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,OAAO,EAAE;MACZ;MACAQ,UAAU,CAAC,MAAM;QACfV,eAAe,CAACW,OAAO,CAACC,KAAK,EAAE;MACjC,CAAC,EAAE,CAAC,CAAC;IACP;EACF,CAAC,EAAE,CAACV,OAAO,CAAC,CAAC;EAEb,oBACE,QAAC,IAAI;IAAC,MAAM,EAAC,QAAQ;IAAC,IAAI,EAAEJ,QAAS;IAAC,IAAI,EAAC,cAAc;IAAC,KAAK,EAAEF,MAAM,CAACiB,SAAU;IAAA,wBAChF,QAAC,IAAI,CAAC,IAAI;MAAC,KAAK,EAAEjB,MAAM,CAACkB,UAAW;MAAC,IAAI,EAAC,SAAS;MAAA,uBACjD,QAAC,KAAK;QACJ,IAAI,EAAC,OAAO;QACZ,MAAM,eAAE,QAAC,iBAAiB;UAAA;UAAA;UAAA;QAAA,QAAI;QAC9B,WAAW,EAAC,SAAS;QACrB,QAAQ,EAAEZ,OAAQ;QAClB,YAAY,EAAEG,QAAS;QACvB,GAAG,EAAEL;MAAgB;QAAA;QAAA;QAAA;MAAA;IACrB;MAAA;MAAA;MAAA;IAAA,QACQ,eACZ,QAAC,IAAI,CAAC,IAAI;MAAC,KAAK,EAAEJ,MAAM,CAACmB,QAAS;MAAC,IAAI,EAAC,SAAS;MAAA,uBAC/C,QAAC,MAAM;QAAC,IAAI,EAAC,SAAS;QAAC,IAAI,EAAC,OAAO;QAAC,KAAK,EAAC,QAAQ;QAAA,uBAChD,QAAC,aAAa;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA;IACV;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACP;AAEX,CAAC;AAAC,GAxDIlB,QAAQ;EAAA,QAEOR,IAAI,CAACU,OAAO,EAMdN,WAAW,EAGRC,WAAW;AAAA;AAAA,KAX3BG,QAAQ;AA0Dd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}